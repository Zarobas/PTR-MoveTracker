// Function to open the Move Tracker window
async function openMoveTracker() {
    console.log("Opening Move Tracker...");

    let moves = actor.getFlag("core", "moves") || [];
    console.log("Loaded moves:", moves);

    function renderMoveList(html) {
        const moveListDiv = html.find("#move-list")[0];
        moveListDiv.innerHTML = moves.map((move, index) => {
            return `<div class="move-entry" style="display: flex; align-items: center; margin-bottom: 15px; justify-content: space-between;">
                <button class="remove-move" id="remove-${index}" style="background-color: red; color: white; border: none; width: 40px; height: 40px; font-weight: bold; cursor: pointer;">
                    -
                </button>
                <div style="display: flex; align-items: center; gap: 10px; flex-grow: 1;">
                    <img src="${move.img}" width="30" height="30" style="border-radius: 5px;">
                    <a href="#" onclick="game.packs.get('${move.pack}').getDocument('${move.id}').then(move => move.sheet.render(true));">${move.name}</a>
                </div>
                <div id="action-${index}" class="action-buttons" style="display: flex; flex-direction: row; align-items: center; gap: 10px;">
                    ${move.freq === "none" ? 
                        `<select id="freq-${index}" onchange="changeFreq(${index}, this)">
                            <option value="none" ${move.freq === "none" ? "selected" : ""}>Select Frequency</option>
                            <option value="counter" ${move.freq === "counter" ? "selected" : ""}>Counter</option>
                            <option value="exh" ${move.freq === "exh" ? "selected" : ""}>EXH</option>
                            <option value="use" ${move.freq === "use" ? "selected" : ""}>USE</option>
                        </select>` : ""}
                    <button id="decrease-${index}" onclick="decreaseMove(${index})" style="width: 40px; height: 40px; ${move.freq === 'counter' ? 'display: inline;' : 'display: none;'}">-</button>
                    <span id="move-count-${index}" style="display: ${move.freq === 'counter' ? 'inline' : 'none'}; margin: 0 10px;">${move.uses}</span> 
                    <button id="increase-${index}" onclick="increaseMove(${index})" style="width: 40px; height: 40px; ${move.freq === 'counter' ? 'display: inline;' : 'display: none;'}">+</button>
                    <button id="exh-${index}" onclick="markExh(${index})" style="width: 40px; height: 40px; ${move.freq === 'exh' ? 'display: inline;' : 'display: none;'}">EXH</button>
                    <button id="use-${index}" onclick="markUse(${index})" style="width: 40px; height: 40px; ${move.freq === 'use' ? 'display: inline;' : 'display: none;'}">USE</button>
                </div>
            </div>`;
        }).join("");

        moves.forEach((_, index) => {
            document.getElementById(`remove-${index}`).addEventListener("click", () => removeMove(index, html));
        });
    }

    new Dialog({
        title: "Move Usage Tracker",
        content: `
            <div style="height: 600px; overflow-y: auto;">
                <h3>Tracked Moves</h3>
                <div id="move-list">${moves.length ? "" : "<i>No moves added</i>"}</div>
                <div style="margin-top: 20px; text-align: center;">
                    <h3>Drag & Drop Moves Here</h3>
                    <div id="drop-zone" 
                        style="width: 100%; height: 75px; border: 2px dashed gray; display: flex; align-items: center; justify-content: center;">
                        <i>Drop a move here</i>
                    </div>
                </div>
            </div>
        `,
        buttons: {
            close: {
                label: "Close",
                callback: async () => {
                    console.log("Saving moves to actor flags...");
                    await actor.setFlag("core", "moves", moves);
                }
            }
        },
        width: 400,
        height: 600,
        render: html => {
            console.log("Dialog rendered.");
            renderMoveList(html);

            window.increaseMove = (index) => {
                moves[index].uses++;
                document.getElementById(`move-count-${index}`).innerText = moves[index].uses;
            };

            window.decreaseMove = (index) => {
                if (moves[index].uses > 0) moves[index].uses--;
                document.getElementById(`move-count-${index}`).innerText = moves[index].uses;

                // Reset button colors when decreasing
                resetUseExhButtons();
            };

            window.markExh = (index) => {
                resetUseExhButtons();
                document.getElementById(`exh-${index}`).style.backgroundColor = "red";
            };

            window.markUse = (index) => {
                resetUseExhButtons();
                document.getElementById(`use-${index}`).style.backgroundColor = "green";
            };

            window.removeMove = async (index, html) => {
                moves.splice(index, 1);
                await actor.setFlag("core", "moves", moves);
                renderMoveList(html);
            };

            window.changeFreq = (index, dropdown) => {
                const freq = dropdown.value;
                const actionDiv = document.getElementById(`action-${index}`);
                actionDiv.style.display = "none";
                dropdown.style.display = "none";
                moves[index].freq = freq;

                if (freq === "counter") {
                    document.getElementById(`decrease-${index}`).style.display = "inline";
                    document.getElementById(`increase-${index}`).style.display = "inline";
                    document.getElementById(`move-count-${index}`).style.display = "inline";
                    actionDiv.style.display = "inline";
                } else if (freq === "exh") {
                    document.getElementById(`exh-${index}`).style.display = "inline";
                    actionDiv.style.display = "inline";
                } else if (freq === "use") {
                    document.getElementById(`use-${index}`).style.display = "inline";
                    actionDiv.style.display = "inline";
                }
            };

            // Function to reset all EXH and USE buttons
            function resetUseExhButtons() {
                // Loop through all moves and reset EXH and USE buttons
                moves.forEach((_, idx) => {
                    document.getElementById(`exh-${idx}`).style.backgroundColor = "";
                    document.getElementById(`use-${idx}`).style.backgroundColor = "";
                });
            }
        }
    }).render(true);
}

openMoveTracker();
