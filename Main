// Get the actor based on the character sheet open or the selected token
let actor;

console.log("Starting the macro...");

// Check if we're in GM or Player mode
if (game.user.isGM) {
    console.log("Running as Game Master.");
    actor = canvas.tokens.controlled.length > 0 
        ? canvas.tokens.controlled[0].actor  
        : game.actors.get(args[0]?.actorId);
} else {
    console.log("Running as Player.");
    actor = game.user.character;
}

// Debug the actor selection
if (!actor) {
    console.warn("No actor selected or no character sheet open.");
    ui.notifications.warn("You must have a character selected or a character sheet open.");
    return;
} else {
    console.log("Actor selected:", actor.name);
}

// Function to open the Move Tracker window
async function openMoveTracker() {
    console.log("Opening Move Tracker...");

    let moves = actor.getFlag("core", "moves") || [];
    console.log("Loaded moves:", moves);

    function renderMoveList(html) {
        const moveListDiv = html.find("#move-list")[0];
        moveListDiv.innerHTML = moves.map((move, index) => {
            return `<div class="move-entry" style="display: flex; align-items: center; margin-bottom: 15px; justify-content: space-between;">
                <!-- Remove button on the left -->
                <button class="remove-move" id="remove-${index}" style="background-color: red; color: white; border: none; width: 40px; height: 40px; font-weight: bold; cursor: pointer; resize: none; text-align: center; display: flex; justify-content: center; align-items: center;">
                    -
                </button>
                
                <!-- Move name and image in the center -->
                <div style="display: flex; align-items: center; gap: 10px; flex-grow: 1;">
                    <img src="${move.img}" width="30" height="30" style="border-radius: 5px;">
                    <a href="#" onclick="game.packs.get('${move.pack}').getDocument('${move.id}').then(move => move.sheet.render(true));">${move.name}</a>
                </div>
                
                <!-- Dropdown and counter/buttons on the right -->
                <div id="action-${index}" class="action-buttons" style="display: flex; flex-direction: row; align-items: center; gap: 10px;">
                    <!-- Dropdown menu -->
                    <select id="freq-${index}" onchange="changeFreq(${index}, this)">
                        <option value="none">Select Frequency</option>
                        <option value="counter">Counter</option>
                        <option value="exh">EXH</option>
                        <option value="use">USE</option>
                    </select>

                    <!-- Counter buttons -->
                    <button id="decrease-${index}" onclick="decreaseMove(${index})" style="width: 40px; height: 40px; display: none; justify-content: center; align-items: center;">-</button>
                    <span id="move-count-${index}" style="display: none; margin-left: 10px; margin-right: 10px;">${move.uses}</span> 
                    <button id="increase-${index}" onclick="increaseMove(${index})" style="width: 40px; height: 40px; display: none; justify-content: center; align-items: center;">+</button>
                    <!-- EXH and USE buttons -->
                    <button id="exh-${index}" onclick="markExh(${index})" style="width: 40px; height: 40px; display: none; justify-content: center; align-items: center;">EXH</button>
                    <button id="use-${index}" onclick="markUse(${index})" style="width: 40px; height: 40px; display: none; justify-content: center; align-items: center;">USE</button>
                </div>
            </div>`;
        }).join("");

        // Attach event listeners for remove buttons
        moves.forEach((_, index) => {
            document.getElementById(`remove-${index}`).addEventListener("click", () => removeMove(index, html));
        });
    }

    new Dialog({
        title: "Move Usage Tracker",
        content: `
            <div>
                <h3>Tracked Moves</h3>
                <div id="move-list">
                    ${moves.length ? "" : "<i>No moves added</i>"}
                </div>
            </div>
            <div style="margin-top: 20px; text-align: center;">
                <h3>Drag & Drop Moves Here</h3>
                <div id="drop-zone" 
                    style="width: 100%; height: 75px; border: 2px dashed gray; display: flex; align-items: center; justify-content: center;">
                    <i>Drop a move here</i>
                </div>
            </div>
        `,
        buttons: {
            close: {
                label: "Close",
                callback: async () => {
                    console.log("Saving moves to actor flags...");
                    await actor.setFlag("core", "moves", moves);
                }
            }
        },
        render: html => {
            console.log("Dialog rendered.");
            renderMoveList(html);

            let dropZone = html.find("#drop-zone")[0];
            dropZone.ondragover = (event) => event.preventDefault();
            dropZone.ondrop = async (event) => {
                console.log("Dropped item detected.");
                event.preventDefault();
                let data = JSON.parse(event.dataTransfer.getData("text/plain"));

                if (data.type !== "Item") {
                    console.warn("Dropped data is not an Item.");
                    return;
                }

                let item = await fromUuid(data.uuid);
                if (item.type !== "move") {
                    console.warn("Dropped item is not a move.");
                    return;
                }

                moves.push({
                    name: item.name,
                    img: item.img,
                    id: item.id,
                    pack: item.pack || item.parent.uuid,
                    uses: item.system.uses?.max || 1
                });

                console.log("Added move:", item.name);
                await actor.setFlag("core", "moves", moves);
                renderMoveList(html);
            };

            window.increaseMove = (index) => {
                console.log("Increasing move use for index:", index);
                moves[index].uses++;
                document.getElementById(`move-count-${index}`).innerText = moves[index].uses;
            };

            window.decreaseMove = (index) => {
                console.log("Decreasing move use for index:", index);
                if (moves[index].uses > 0) moves[index].uses--;
                document.getElementById(`move-count-${index}`).innerText = moves[index].uses;
                resetUseExhButtons();
            };

            window.markExh = (index) => {
                console.log("Marking move as EXH:", index);
                resetUseExhButtons();
                document.getElementById(`exh-${index}`).style.backgroundColor = "red";
            };

            window.markUse = (index) => {
                console.log("Marking move as USE:", index);
                resetUseExhButtons();
                document.getElementById(`use-${index}`).style.backgroundColor = "green";
            };

            window.removeMove = async (index, html) => {
                console.log("Removing move:", moves[index].name);
                moves.splice(index, 1);
                await actor.setFlag("core", "moves", moves);
                renderMoveList(html);
            };

            window.changeFreq = (index, dropdown) => {
                const freq = dropdown.value;
                const actionDiv = document.getElementById(`action-${index}`);
                const dropdownDiv = document.getElementById(`freq-${index}`);

                // Hide action buttons first
                actionDiv.style.display = "none";
                dropdownDiv.style.display = "none";  // Hide the dropdown

                if (freq === "counter") {
                    document.getElementById(`decrease-${index}`).style.display = "inline";
                    document.getElementById(`increase-${index}`).style.display = "inline";
                    document.getElementById(`move-count-${index}`).style.display = "inline";
                    actionDiv.style.display = "inline";
                } else if (freq === "exh") {
                    document.getElementById(`exh-${index}`).style.display = "inline";
                    actionDiv.style.display = "inline";
                } else if (freq === "use") {
                    document.getElementById(`use-${index}`).style.display = "inline";
                    actionDiv.style.display = "inline";
                }
            };

            function resetUseExhButtons() {
                moves.forEach((_, idx) => {
                    const exhButton = document.getElementById(`exh-${idx}`);
                    const useButton = document.getElementById(`use-${idx}`);
                    if (exhButton) exhButton.style.backgroundColor = "";
                    if (useButton) useButton.style.backgroundColor = "";
                });
            }
        }
    }).render(true);
}

// Open the Move Tracker window
openMoveTracker();
